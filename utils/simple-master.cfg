# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}


from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("test", "test")]


c['slavePortnum'] = 9989

from buildbot.changes.pb import PBChangeSource
from gitpoller import GitSource
from superpb import SuperPBChangeSource

c['change_source'] = [GitSource("git://git.xmms.se/xmms2/xmms2-devel"), SuperPBChangeSource()]

####### SCHEDULERS

from buildbot.scheduler import Scheduler
c['schedulers'] = []
c['schedulers'].append(Scheduler(name="all", branch="master",
                                 treeStableTimer=1,
                                 builderNames=["test"]))


####### BUILDERS

from buildbot.process import factory
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import SetProperty
from buildbot.process.properties import WithProperties

f1 = factory.BuildFactory()
f1.addStep(ShellCommand(command="echo foo >testfile"))
# add a property that increases with one every other build
f1.addStep(SetProperty(command=WithProperties("echo $((%(buildnumber)s / 2))"), property="halfbuildnum"))
f1.addStep(SetProperty(command=WithProperties("echo $((5 - (%(buildnumber)s %% 5)))"), property="buildnummod5"))
f1.addStep(SetProperty(command="echo foo", property="foo"))
# fail every forth build
f1.addStep(ShellCommand(command=WithProperties("exit $((%(buildnumber)s %% 4 == 0))")))

b1 = {'name': "test",
      'slavename': "test",
      'builddir': "test",
      'factory': f1,
      }
c['builders'] = [b1]


####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
w=html.WebStatus(http_port=8010, allowForce=True)
import jsonstatus
import tarhack
reload(tarhack)
w.putChild("json", jsonstatus.JSONStatusResource())
w.putChild("tar", tarhack.TarHackResource("/tmp/tars"))
c['status'].append(w)

####### DEBUGGING OPTIONS

c['debugPassword'] = "test"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "test")


####### PROJECT IDENTITY

c['projectName'] = "buildbot stuff"
c['projectURL'] = "http://0x63.nu/"

c['buildbotURL'] = "http://localhost:8010/"


import bbtest
bbtest.conf(c)
